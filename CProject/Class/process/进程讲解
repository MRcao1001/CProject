1--进程创建
    进程A  -->  进程B  -->  进程C  -->  进程A....
    执行10us    执行10us    执行10us    执行10us
    这种轮换切换的方法叫做——时间片轮转算法
    使用 fork()函数创建新进程，在子进程创建时，返回子进程号，子进程拷贝父进程代码和运行状态继续运行，并将之前父进程创建进程返回值在子进程内赋值为0
    进程结束到被回收之间的时间内 未被回收的进程称为  僵尸进程，一般情况下僵尸进程都会被很快回收，一旦没有回收就会占用大量资源

    使用exec()创建进程
        exec创建进程和fork创建进程的区别：exec创建进程替换之前的进程，fork创建独立的进程
        execl(path ,char *arg, ...)创建进程运行路径中的程序
        execlp(char *file, char*arg, ...)创建进程执行系统环境变量中的程序

    守护进程？课后研究
**** printf("x"); 和 printf("x\n");的区别在哪里
    看两段函数：
    int main(int argc, char const *argv[])
    {
        printf("x");
        while(1){};
    }
    /----输出x-----/
    int main(int argc, char const *argv[])
    {
        printf("x\n");
        while(1){};
    }
    /----不输出x----/
    当没有回车时，数据存入缓冲区，当缓冲区没有满的时候，等待程序正常结束才输出，有回车是无论有没有满都会输出；
2--进程通信
    方式及其原理：
        a： 管道(pipe)
            头文件：
            #include <unistd.h>
            无名管道：只能用于亲缘关系的进程之间通信
            在内存中申请一个临时空间并对其封装，与进程相互独立；提供写入读取接口，一旦数据被读取就会清除管道内的数据
            实现：pipe.c
            通过管道实现子进程之间的通信

            有名管道：可以在没有亲缘关系的进程之间通信,有名管道是一个文件，使用mkfifo创建管道文件

            
        b：共享内存(shmget)
            头文件:
            #include <sys/ipc.h>
            #include <sys/shm.h>
            函数原型:
            int shmget(key_t key,size_t,int shmflg)
            查询系统共享内存 ipcs -m
            ------------ 共享内存段 -------------- 
            键          shmid     拥有者      权限        字节      连接数       状态      
            0x00000000 2031616    mrcao      600        16777216   2          目标       
            0x00000000 1277953    mrcao      600        524288     2          目标       
            0x00000000 1703938    mrcao      600        8388608    2          目标       
            0x00000000 1343491    mrcao      600        67108864   2          目标       
            0x00000000 1736708    mrcao      600        393216     2          目标       
            0x00000000 1769477    mrcao      600        12288      2          目标       
            0x00000000 1835014    mrcao      700        16472      2          目标       
            0x00000000 2752519    mrcao      600        524288     2          目标       
            0x00000000 2490376    mrcao      700        163240     2          目标 

            使用共享内存：
            1:将共享内存关联到进程空间 shmat----share memory attach
            void *shmat (int shmid, const void *shmaddr, int shmflg);
            拷贝字符串：
            1--strcpy((char *)dest, "stream");
            2--memcpy((void *)dest,(void *)src,size_t);
            3--sprintf(char *str, const char *format, ...)  \  sscanf(const char *str, const char *format, ...);
            4--直接操作内存空间的值

        c：内存映射
            将文件的一部分映射到内存中（通常用于操作设备文件，例如摄像头，录音器等） mmap----memory mmap
            <sys/mman.h>
            void *mmap( void *addr, 
                        size_t length, 
                        int prot(映射的空间的权限【MAP_SHARED】【MAP_PRIVATE】), 
                        int flags,
                        int fd, 
                        off_t offset(从文件何处开始));
        d：信号
            atoi()将字符串转变成整数的函数
            SIGKILL信号，根据进程号结束进程
            alarm()信号,设定秒钟结束信号
            signal()函数自定义信号函数
                SIGKILL & SIGSTOP不允许通过signal()自定义
            信号屏蔽:
            在自定义信号函数内屏蔽信号
            //创建信号集合
            sigset_t set;
            sigset_t old;//定义变量保留状态
            sigemptyset (&set);
            sigaddset(&set,SIGTSTP);
            //屏蔽信号
            sigprocmask(SIG_BLOCK,&set,old);
            //处理完成之后解除屏蔽
             (SIG_SETMASK,&set,old);
            

            sigaction{
                void     (*sa_handler)(int);
                void     (*sa_sigaction)(int, siginfo_t *, void *);
                sigset_t   sa_mask;//在处理信号时防止其他信号的干扰
                int        sa_flags;
                void     (*sa_restorer)(void);   
            }



            例子：：
            -------------------------------------------------------------------------------
            -------------------------------------------------------------------------------
            sigset_t set;
            sigemptyset (&set);
            sigaddset(&set,SIGALRM);//屏蔽alarm信号

            sigset_t new;
            sigemptyset(&new);
            sigaddset(&new,SIGINT);

            alarm(5);
            sigsuspend(&new);
            //用未阻塞的SIGINT信号和被阻塞的SIGALRM信号交换，SIGINT信号进入阻塞状态，SIGALRM信号恢复
            //于此同事挂起程序
            --------------------------------------------------------------------------------
            -------------------------------------------------------------------------------
        e：信号量
        f：socket
        g：消息队列
