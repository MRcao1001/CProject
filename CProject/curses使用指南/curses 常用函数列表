
1、关闭输入显示
	int noecho(void)：输入时字符不会显示出来（如输入密码）

2、关闭行缓冲
	int cbreak(void)：可以关闭行缓冲（中断和流控制则没有影响），可以使用户按下的字符能够立刻被程序处理。

3、输出格式串函数
	int printw(--)：用法和普通模式下的printf函数一样

4、刷新屏幕内容
	int refresh(void):当其他函数仅仅是操作窗口数据结构时，refresh函数必须被调用来刷新。

5、输入一个字符
	int getch(void):调用成功则返回被按下的按键键值，失败（ERR）。getch()阻塞等待接受一个字符时，它会自动先刷新屏幕。

6、进入curses模式
	WINDOW *initscr(void)

7、离开curses模式
	int endwin(void):

8、清除窗口
	int clear(void)

9、subwin()??
10、delwin()??
11、newwin()??


在编译时 gcc -o 1 1.c -lncurses



一、输出字符类函数
	int addch(const int ch);
	int waddch(WINDOW *win,const int ch);
	int mvaddch(int y,int x,const int ch);
	int mvwaddch(WINDOW *win,int y,int x,chosnt int ch);
	int echochar(const int ch);
	int wechochar(WINDOW *win,const int ch);

当输入tab键时，间隔间的字符将被删除
当输入回车符时，将光标到窗口右边界的所有字符删除，然后转到下一行。
在没有指定y,x的情况下， 将字符输出到之前字符的后面。即接着前面的字符输出。不会换行

二、输出字符串类函数

	int addstr(const char *str);
	int addnstr(const char *str,int n);
	int waddstr(WINDOW * win,const char *str);
	int waddnstr(WINDOW * win,const char *str,int n);
	int mvaddstr(int y,int x,const char * str);
	int mvaddnstr(int y,int x ,const char *str,int n);
	int mvwaddstr(WINDOW *str,int y,int x,const char *str);
	int mvwaddnstr(WINDOW *str, int y,int x ,cosnt char * str,int n);

如果n=-1,则整个字符串都将被输出
这些函数没有自动换行的功能，所以，如果想要在下一行输出，要先addch('\n');（或其他有此功能的函数，或者是，在上一个输出的字符后面添加一个换行符）。

三、addchstr类“输出”函数

	int addchstr(const chtype *str);
	int addchnstr(const chtype *str,int n);
	int waddchstr(WINDOW *win,const chtype*str);
	int waddchnstr(WINDOW *win ,const chtype*str,int n);
	int mvaddchstr(int y,int x,const  chtype*str);
	int mvaddchnstr(int y,int x,const chtype *str,int n);
	int mvwaddchstr(WINDOW *win,int y,int x,const chtype *str);
	int mvwaddchnstr(WINDOW *win,int y,int x ,const chtype *str,int n);

这几个函数和上面的addstr类函数类似，只是它们不直接往实际的物理窗口上输出，而是先输出到虚拟窗口，光标的位置保持不变。若输出的长度超过了窗口的宽度，注意：他们不会自动换行，而是继续往“右”输出，实际上也就是被截断了。
注：chtype 为unsigned long 类型，在ncurses.h中定义的宏定义。


四、printw类输出函数
	int printw(const char *fmt,...);  类似于printf（）
	int wprintw(WINDOW *win,const char *fmt,...);	
	int mvprintw(int y,int x,const char *fmt,...);
	int mvwprintw(WINDOW *win,int y,int x,const char *fmt,...);
	int vwprintw(WINDOW *win,const char *fmt,va_list varglist);


五、字符属性的设置，例如颜色、下划线、加粗等

(一)颜色设置
	int start_color(void);   //开启颜色设置
	int init_pair(short pair,short r,short g);//初始化颜色对，（前景色、背景色）
	int init_color(short color,short r,short g,short b);
	bool has_colors(void);   //判断终端是否能支持颜色
	bool can_change_color(void); //判断能否改变颜色
	int color_content(short color,short *f,short *b);//可以获取颜色定义中的三基色值
	int pair_content(short pair,short *f,short *b);//可以获得颜色对中的前/背景色
	int assume_default_colors(int fg,int bg);//设置系统前景色、背景色
	int use_default_colors(void);

             attron(COLOR_PAIR(pair)); //使初始化的颜色对有效
             attroff(COLOR_PAIR(pair));//使初始化的颜色对无效

	

若想输出彩色字符，必需要首先调用init_color函数，通常是紧接着initscr函数之后调用。颜色通常是成对使用的。一个颜色对包含前景色和背景色，可以利用init_pair函数来初始化颜色对。当它被初始化后，可以用在<ncurses.h>中的COLOR_PAIR(n)这个宏来作为视频属性。


六、默认可用的颜色
	#define COLOR_BLACK          0
	#define COLOR_RED            1
	#define COLOR_GREEN          2
	#define COLOR_YELLOW         3
	#define COLOR_BLUE           4
	#define COLOR_MAGENTA        5
	#define COLOR_CYAN           6
	#define COLOR_WHITE          7

颜色变量为chtype类型的。但是只占整个chtype类型的低8位。

若想改变某个颜色的定义，可以先调用can_change_color这个函数来判断一下是否真的可以改变，若可以重新定义颜色，这时就可以调用init_color来做这件事。


七、属性设置类函数
	int attroff(int attrs);
	int wattroff(WINDOW *win ,int attrs);
	int attron(int attrs);
	int wattron(WINDOW *win,int attrs);
	int attrset(int attrs);
	int wattrset(WINDOW *win ,int attrs);
	int color_set(short color_pair_number,void *opts);
	int wcolor_set(WINDOW *win,short color_pair_number,void *opts);
	int standend(void);   //关闭设置的所有属性
	int wstandend(WINDOW *win);
	int standout(void);
	int wstandout(WINDOW *win);
	int attr_get(attr_t *attrs,short *part,void *opts);  //获取当前窗口的颜色及字符属性。
	int wattr_get(WINDOW *win,attr_t *attrs,short *part,void *opts);
	int attr_off(attr_t attrs,void *opts);
	int wattr_off(WINDOW *win, void * opts);
	int attr_on(attr_t attr,void *opts);
	int wattr_on(attr_t attr,void *opts);
	int attr_set(attr_t attrs,short pair,void *opts);
	int wattr_set(WINDOW *win,attr_t attrs,shotr pair,void *opts);
	int chgat(int n,attr_t attrs,short color,const void *opts);  //从光标起改变字符的属性，且光标不移动，n为要起作用的字符个数，如果为-1，则整行起作用。opts 一般为NULL。
	int wchgat(WINDOW *win,int n,attr_t attrs,short color,const void *opts);
	int mvchgat(int y,int x,int n,attr_t attr,short color ,const void *opts);
	int mvwchgat(WINDOW *win,nt y,int x,int n,attr_t attr,short color ,const void *opts)
	
	
字符常见属性：
#define NCURSES_ATTR_SHIFT  8
#define NCURSES_BITS(mask,shift)((mask)<<((shift)+NCURSES_ATTR_SHIFT));

#define A_NORMAL 0L  //关闭所有特殊属性普通模式
#define A_ATTRIBUTES   NCURSES_BITS(~(1UL - 1UL),0)   打开全部特殊属性
#define A_STANDOUT     NCURSES_BITS(1UL,8)  高亮突出显示
#define A_UNDERLINE    NCURSES_BITS(1UL,9)  下划线
#define A_REVERSE        NCURSES_BITS(1UL,10)  发色突出显示
#define A_BLINK            NCURSES_BITS(1UL,11)  闪烁
#define A_DIM               NCURSES_BITS(1UL,12)  半亮突出显示 
#define A_BOLD             NCURSES_BITS(1UL,13) 加粗
可以看到，这些只是一些位操作。
在使用时：定义变量NCURSES_ATTR_T attr;


八、设置/移动光标类、画线类、画方框类
	int move(int y,int x);
	int wmove(WINDOW *win,int y,int x);
       宏，移动光标到（x,y）注意窗口左上角坐标为（0,0）
	int curs_set(int visibility);  //设置光标模式。0不可见；1普通模式；2完全可见.该函数调用成功，将返回光标先前的模式
	int border(chtype ls,chtype rs,chtype ts,chtype bs,chtype tl,chtype tr,chtype bl,chtype br); 
	int wborder()
	int box()
	int hline()  //画横线
	int whline()
	int vline()   //画竖线
	int wvline()
	int mvhline()
	int mvwhline()
	int mvvline()
	int mvwvline()
注意：在划线时光标位置不移动

	
九、背景色的设置
	int bkgdset(chtype ch);  //从当前光标起，到字符不再输出的那一行有效
	int wbkgdset(WINDOW *win,chtype ch);
	int bkgd(chtype ch);//不管以前显示的字符怎么样，它们都被设置为新的背景色。而且是全局的
	int wbkgd(WINDOW *win,chtype ch);
	chtype getbkgd(WINDOW *win);

注意：区分字符的背景色 和在部分所说的背景色。


十、刷新类函数
	int refresh(void);
	int wrefresh(void);
	int wnoutrefresh(WINDOW *win);
	int doupdate(void);


十一、输出控制类函数
	int clearok(WINDOW *win,bool bf);
	int idlok(WINDOW *win,bool bf);
	int idcok(WINDOW *win,bool bf);
	int immedok(WINDOW *win,bool bf);
	int leaveof(WINDOW *,bool bf);
	int setscrreg(int top,int bot);
	int wsetscrreg(int top,int bot);
	int scrollok(WINDOW *win,bool bf);
	int nl(void);
	int nonl(void);
                 

十一、输入类函数

(一)、getch()类函数
	int getch(void);    //输入默认可见，（若调用noecho函数，则输入不可见）成功，返回输入的字符。
	int wgetch(WINDOW *win);
	int mvgetch(int y,int x);
	int mvwgetch(WINDOW *win,int y,int x);
	int ungetch(void);
	int ungetch(void);
	int has_key(int ch);
  getch系列函数从窗口中“等待”输入一个字符。在非阻塞模式下，若无字符输入，那么就返回ERR。在延时模式下，若在规定的时间内无输入，那么也会返回ERR。
getch()系列函数在curses中的功能很强大，若keypad是TRUE的话，它可以接收功能键（F1、F2等等）。


常用按键键值如下：
	#define KEY_DOWN      0402
	#define KEY_UP        0403
	#define KEY_LEFT      0404
	#define KEY_RIGHT     0405
	#define KEY_HOME      0406
	#define KEY_BACKSPACE 0407
	#define KEY_F0        0410
	#define KEY_F(n)      (KEY_F0+(n))
              ..........

（二）、scanw系列输入函数
	int scanw(char *fmt,...);
	int wscanw(WINDOW *win,char *fmt,...);
	int mvscanw(int y,int x,char *fmt);
	int mvwscanw(WINDOW *win,int y,int x,char *fmt,..);
	int vwscanw(WINDOW *win ,char *fmt,va_list varglist);
和scanf函数类似

（三）、getstr系列输入函数
	int getstr(char *str);
	int getnstr(char *str,int n);
	int wgetstr(WINDOW *win,char *str);
	int wgetnstr(WINDOW *win, char *str,int n);
	int mvgetstr(int y,int x,char *str);
	int mvwgetstr(WINDOW *win,int y,int x,char *str);
	int mvgetnstr(int y,int x,char *str,int n);
	int mvwgetnstr(WINDOW *win,int y,int x,char *str,int n);
这类函数主要处理字符串的输入。


十二、输入管理类函数
	int cbreak(void);  //关闭输入行缓冲
	int nocbreak(void);
	int echo(void);
	int noecho(void);   //关闭输入显示
	int halfdelay(int tenths);//会在参数时间内等待输入。半延时模式
	int intrflush(WINDOW *win,bool bf);
	int keypad(WINDOW *win,bool bf);  //bf为TRUE，则指定窗口就能处理功能键
	int meta(WINDOW *win,bool bf);
	int nodelay(WINDOW *win,bool bf); //使gentch成为一个非阻塞的函数，当前没有任何输入时，立即返回ERR。若关闭，则getch函数会阻塞，直到有按键按下。默认是关闭。
	int raw(void);    //和cbreak相同，关闭输入行缓冲
	int noraw(void);
	void timeout(int delay);
	void wtimeout(WINDOW *win,int delay);
	int typeahead(int fd);

十三、窗口机制

（一）、创建窗口类函数
	WINDOW *newwin(int nlines,int ncols,int begin_y,int begin_x);
	int delwin(WINDOW *win);
	int mvwin(WINDOW *win);
	WINDOW *subwin(window *orig,int lines, int ncols,int begin_y,int begin_x);
	WINDOW *derwin(WINDOW *orig,int nlines,int ncols,int begin_y,int begin_x);
	int mvderwin(WINDOW *win,int part_y,int part_x);
	WINDOW *dupwin(WINDOW *win);

(二)、更新窗口类函数
	int touchwin(WINDOW *win);
	int touchline(WINDOW *win,int start,int count);
	int untouchwin(WINDOW *win);
	int wtouchln(WINDOW *win,int y,int n,int changed);
	bool is_linetouched(WINDOW *win,int line);
	bool is_wintouched(WINDOW *win);

touchwin()函数会假定整个窗口都被修改了，当调用wrefresh时，会将指定的窗口重新绘制。
如果不调用touchwin函数，而直接调用wrefresh函数，则只是重新绘制修改的部分。

十四、拷贝窗口类函数
	int overlay(const WINDOW *srcwin,window *dstwin);
	int overwrite(const WINDOW *srcwin,WINDOW *dstwin);
	
overlay函数，只将非空字符拷贝到目的窗口中，而overwrite会一股脑的将整个窗口拷贝到目的窗口。

十五、保存窗体
	int putwin(WINDOW *win,FILE *filep);
	WINDOW *getwin(FILE *filep);

putwin()函数将所有和窗口相关的数据结构写入指定的文件。
getwin()函数从文件中读出数据，然后用这些数据创建一个相应的新窗口。

有mv前缀的函数，光标将移动到指定的位置处。
