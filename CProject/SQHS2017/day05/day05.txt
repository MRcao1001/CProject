		day05	Note
复习：
1. 逻辑运算符
		表达式1 逻辑运算符 表达式2
	&&：
		1 为假，则 2 不计算
		表达式1 && 表达式2 && 表达式3
		
	||：
		1 为真，则 2 不计算
		表达式1 && 表达式2 || 表达式3
		
	！：

2. 条件运算符
	？ ：
	右结合性，三目运算符
	条件运算符的优先级高于赋值

3. 逗号运算符
	int a = (21,b,b+=3,(43,b++), b+=4);
	逗号运算符的优先级低于赋值运算符

4. 位运算符
	&
	|
	~
	^
	<<
	>>

5. 赋值运算符
	=
	+= -= *= /= %=
	&= |= ~= ^= <<= >>=

6. 位运算的使用
	
================================================
1. 运算符的优先级
	括号成员第一，全体单目第二
	乘除余三，加减四
	位移五，关系六，等(==)与不等(!=)排第七
	位与，异或和位或八九十
	逻辑与和或十一与十二
	条件高于赋值，逗号运算最低

	同级运算符，由结合性决定先执行哪个
	大部分具有：右结合性（从左向右）
	条件：左结合性

2. C 语言三大结构
	顺序结构
	分支结构
	循环结构

3. 分支结构（一）
（1）if 语句 --- 条件判断语句
	 一般使用形式：
	 	if(表达式)
	 	{
	 		//代码块
	 	}
	 
	表达式为真，则执行 {} 中内容，否则不执行
	
	若 {} 中只有一条语句，则 {} 可以省略不写！
	一般建议不要省略
	该语句不能为变量定义或变量声明语句！
		if(1)
			int a = 0;	//Error
		
	在 {} 中定义的变量只能在 {} 中使用！
		if(1)
		{
			int a = 34;
			a += 5;
		}
		printf("%d\n",a);		//error

（2）if ～ else
	 if 和 else 不是必须配对！！
	 else 语句可以不写
	 
	 if(表达式)
	 {
	 	//代码块1
	 }
	 else
	 {
	 	//代码块2
	 }
	 
	 表达式成立，则执行代码块1,否则执行代码块2
	 即代码块1 和 代码块2 必有一个被执行！
	 
	 练习：
	 	任意输入两个数，比较得出其中的最大值！
	
（3）if ～ else 的嵌套使用
	 if 语句中可以嵌套 if～else 语句，即：
	 if(表达式1)
	 {
	 	//...
	 	if(表达式2)
	 	{
	 		//代码块1
	 	}
	 	//...
	 }
	 else
	 {
	 	//...
	 	if(表达式3)
	 	{
	 		//代码块2
	 	}
	 	//...
	 }

	 任意输入一个数，判断该数是否是 3 和 5 的倍数！
	
（4）多重if ～ else 语句
	 if(表达式1)
	 {
	 	//代码块1
	 }
	 else if(表达式2)
	 {
	 	//代码块2
	 }
	 else if(表达式3)
	 {
	 	//代码块3
	 }
	 ...
	 else
	 {
	 	//代码块n
	 }

	练习：
		任意输入一个成绩，
		给成绩（百分制）评定等级：
		90～100：A
		80～90：B
		70～80：C
		60～70：D
		0～60：E
			 		
		30 <= a <= 40;	//OK，为真值表达式
		30<=a 的结果不是 0 就是 1,
		无论是 1 还是 0 都小于 40;
			 		
		使用逻辑与完成！

	闰年：
		能被 4 整除，但不能被 100 整除
		或者 能被 400 整除的年份为闰年！

（5）空的 if 语句
		if(表达式)
		{}
		
4. 代码段的注释
	#if 0
		//代码段
	#endif	

5. switch ~ case 语句
（1）一般基本形式：
	 switch(表达式)
	 {
	 	case value1:
	 	case value2:
	 	case value3:
	 	...
	 	//当没有对应的 case 语句时，执行 default 语句
	 	default:	
	 }
	根据表达式的结果，匹配相应的 case 语句
	一般每一个 case 语句都会有一个 break 语句
	break 语句不是必须的

（2）当 case 语句中无 break 语句，则会从要执行的
	 case 语句开始，将其后所有的 case 语句执行一遍
	 直到碰到 break 语句，或者执行完所有case 语句
	 然后结束，退出 switch 

	 break 语句的作用：
	 	结束当前 case 语句不再执行，退出 switch

（3）default 语句的位置在 switch 中可以任意！

（4）switch(表达式)
	对于表达式的要求：int,char 
	
	如果多个 case 语句具有相同的执行代码，
	则可以共用！
	
	表达式的值不能为实型数据，
	实型数据有精确度！在误差允许范围内，都可认为相等
	
	float fNum;
	scanf("%f",&fNum);
	
	如何判断 fNum 是否等于 0 ？？？
		0.000001

	#define FLOAT_ZERO 0.000001
	if(fNum < FLOAT_ZERO && fNum > -FLOAT_ZERO)
	{
		printf("fNum 为 0\n");
	}
	
（5）
		任意输入一个成绩，
		给成绩（百分制）评定等级：
			100：A
			90～99：A
			80～89：B
			70～79：C
			60～69：D
			0～59：E
	
		求商即可：score/10
		
（6）case 语句
	 case 中语句超过三条，加 {}
	 
	 当 case 语句中的第一条语句为变量声明或变量
	 定义语句时， {} 必不可省略
	 
	 case {} 中定义的变量只能在该 case 语句中使用！！

（7）case 语句的重复性
	 case 标签不能重复
	
（8）综合练习：
		if~else
		switch~case
	 	
		while(1)
		{
			
		}

6. 
		'1' + 1  = ?
		 1 + 1   = 2
		'1' + '1' = ?

8. if ～ else 的配对问题
	else 总是与离他最近的 if 进行配对






























	


















