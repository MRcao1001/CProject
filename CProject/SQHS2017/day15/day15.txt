			day15  Note

IP: 192.168.1.101

复习：
1. extern & static & auto
	auto:函数内部，栈区
	extern: 扩展性，扩展变量或函数的作用域
	static: 存储在静态常量区
	
2. register & volatile
	register: 该类型变量不可取地址：&

3. 结构体


作业：
1. int arr[20] = {1,1,1,1,1,0,0,1,0,0,0,1,1,1,1,0,1,0,0,1};
	数组中全部都是由 0 和 1 组成，试写程序计算
	数组中 0 和 1 的个数：
	要求：
		不得使用任何形式的判断语句
		包括但不限于if，swith，三目运算符
		或以循环代替判断的方式

		int buf[2] = {0};
		
		buf[arr[i]]++;
		

2. 自定义函数实现：strncpy()
	char *strncpy(char *dest, const char *src, size_t n);

==================================================
1. 结构体
（1）说明形式
	 struct 结构名称
	 {
	 	//成员列表;
	 };
	 
	struct：关键字，说明该类型为结构类型
	结构名称：代表了一个结构体，驼峰命名法
	struct 结构名称：表示一种构造数据类型
	; 不可省略
	成员列表：可以普通变量定义或者时构造数据类型

（2）应用
	空间坐标系中点的属性：
	 struct point
	 {
	 	float x;
	 	float y;
	 	float z;
	 };
	 
	 只是设计结构，并不占据内存空间
	 当变量被声明为这种类型时，才占据内存空间

（3）结构体变量的定义
	a. 说明结构的同时，定义结构变量
	 struct point
	 {
		float x;
		float y;
		float z;	 
	 }a;
	 
	 a 的类型为 struct point
	 a 具有 x, y, z 三种属性

	b. 先声明结构，后定义变量
		struct point b;
	
	c. 无名结构
	   无名结构在声明时定义变量，否则无实际意义
	   无法引用无名结构
		struct 
		{
			int a;
			int b;
		}c;
	
（4）结构变量的初始化
	 struct point
	 {
	 	float x;
	 	float y;
	 	float z;
	 }a={3.14, 4.15, 5.16},b;
	 b = {1.23, 2.22, 3.33};
	 初始化数据一定要和结构中的声明顺序一一对应
	 
	 struct point c={1.11, 2.22, 3.33},d;
	
	 对于结构变量的初始值不明确，只需简单的初始化
	 使用函数：memset()
	 
	 void *memset(void *s, int c, size_t n);
	 s: 要初始化的内存的首地址
	 c: 初始化内存的值
	 n: 初始化的内存的大小
	 
	 同类型的变量之间可以相互赋值
	 d = c;
	 
（5）结构变量成员的访问
	 . ：表示取结构变量的某个成员
	
	使用形式：
		结构变量名.成员变量名

（6）结构的嵌套说明
	a. 情况一
	 struct date
	 {
	 	int day;
	 	int month;
	 	int year;
	 };

	 struct person
	 {
		int age;
		char name[32];
		struct date birthday;
	 };

	b. 情况二
		//error:结构大小不确定，无法分配内存空间
		struct person
		{
			int age;
			char name[32];
			strcut person girl;
		};
		
		//OK,指针大小确定 4/8 Byte
		struct person
		{
			int age;
			char name[32];
			strcut person *ps;
		};

（7）结构体数组
	  int arr[4];
	  定义一个有四个元素的数组，其中每个元素都是 int
	
	  结构体数组中的每个元素，都是结构类型，
	  具有结构的所有属性

	 a. 结构数组的定义及初始化
	 	struct person
	 	{
	 		int age;
	 		char name[32];
	 	}boy[5] = {
	 				 {20, "qq"},
	 				 {21, "ww"},
	 				 {22, "ee"},
	 				 {23, "rr"},
	 				 {24, "tt"}
	 			  };

	b. struct person girl[3] = {
									{21, "ww"},
									{23, "rr"},
							   };

	每一个成员都具有结构中声明的所有属性
		girl[0].age  girl[0].name
		girl[1].age  girl[1].name 
		girl[2].age  girl[2].name

（8）结构指针
	声明形式：
		struct 结构名 *指针变量名;
		
		大小：
			32 Bit OS: 4 Byte
			64 Bit OS: 8 Byte

	struct person *ps;
	指针访问结构成员：
		ps->age;
		(*ps).age;
		
（9）结构指针分配内存
	 malloc() 	//手动申请内存，从堆上申请
	 free()		//释放 malloc 的内存

	 #include <stdlib.h>
     void *malloc(size_t size);
     	size: 申请的空间大小
     	返回申请内存的首地址
     	
     	void * 类型指针：万能指针
     	
     void free(void *ptr);
		free释放的内存空间必须是 malloc 申请的
		空间，其他地址不可用 free 释放 
	
	 malloc 容易造成内存泄漏，因此
	 malloc 和 free 总是成对出现

	 free 之后的内存空间不可再次访问或者使用

	栈区：
		程序运行过程中，形参，函数返回值，
		局部变量等等都是在栈区产生，
		
		空间有限，由系统分配和释放
		
	堆区：
		静态变量，malloc 等空间是在堆上
		
		堆空间相对于栈空间大得多
		
		堆空间是由程序员手动分配和释放

（10）结构体大小问题
	原则一：
	结构体中元素是按照定义顺序一个一个放到内存中去的，
    但并不是紧密排列的。从结构体存储的首地址开始，每一
    个元素放置到内存中时，它都会认为内存是以它自己的大
    小来划分的，因此元素放置的位置一定会在自己宽度的整
    数倍上开始（以结构体变量首地址为0计算）
		
		//8 Byte
		struct person
		{
			int a;	//0~3
			char b;	//4
		};
		
		//8 Byte
		struct person
		{
			char a;	//0 	//1~3 空着
			int b;	//4~7
		};
		
	原则二：
		在经过第一原则分析后，检查计算出的存储单元
		是否为所有元素中最宽的元素的长度的整数倍，
		是，则结束；若不是，则补齐为它的整数倍.
		
		//4
		struct A
		{
			char a;
			char c;
			short b;
		};
		
		//6
		struct B
		{
			char a;
			short b;
			char c;
		};

		//36
		struct C
		{
			char a[32];
			int b;
		};

3. 选择排序
	int arr[5] = {4,2,1,5,3};
	
	arr[0]  arr[1]  arr[2]  arr[3]  arr[4]
      4       2       1       5       3
      
      1       2       4       5       3
      1       2       4       5       3
      1       2       3       5       4
      1       2       3       4       5
      

第一趟：
	min = 0;
	
	arr[min] arr[i]
	
	min = 2;
	
	交换 arr[0]  arr[2]

第二趟：
	min = 1;
	不用交换

第三趟：
	min = 2;
	比较找最小值
	min = 4;
	交换 arr[2]  arr[4]
	
第四趟：
	min = 3;
	比较找最小值
	
	min = 4;
	交换 arr[3]  arr[4]

作业：
	struct student
	{
		char name[32];
		char sex[8];
		float cGrade;
		float mathGrade;
	};

	定义一个结构体数组，该数组至少有 5 个元素
	求 C math 的总成绩，并按总成绩排序(选择排序)























			
