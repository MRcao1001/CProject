				day10 Note
				
IP: 192.168.155.7

复习：
1. 二维数组
	定义
		行数定义时可以省略
		
	初始化：
	
	数组元素的访问：

2. 二维数组的地址
	int arr[3][4];
	
	arr:
	arr[i]:
	&arr[i]:
	&arr:
	&arr+1:
	
	通过 +1 来确定每个地址的意义

	*(arr+i)+j:第 i 行第 j 列元素的地址

作业：
1. 非波那契数列 --- 循环实现
	

2. 二维数组的行列互换？


3. 二维数组打印杨辉三角？

===================================================
1. 指针
（1）什么是指针？
	 特殊的变量，被解释成内存中的地址

（2）一般定义形式
	 类型说明符 *指针变量名称;
	 
	 int *pa; 	  	//只能保存整型地址
	 double *pd;	//只能 double 类型地址
	 char *pc;		//只能保存 char 类型地址

（3）指针的初始化
	 int a = 0;
	 
	 int b;
	 b = 0;

	对于指针：
		//当指针用途不明确时，可设置为 NULL
		//当使用时，再明确其值
		int *pa = NULL; 	//地址为 0x00000000	
		
		//当指针有明确用途时，可以赋给确切的地址
		int *pA = &a;		

	NULL：
		是一个空指针，被宏定义为 0 
	
	    int *pb;
	    pb = &b;
	    
	    int *pc;
	    *pc = &b;		//Error

（4）指针的简单应用
	 int a = 9;
	 int *pa = &a;

	变量名  变量地址    保存内容
	  a     0xb8ca4       9
	 pa     0xb8ca8     0xb8ca4 

	因此访问 a 可以得到 9
	访问 pa 只是得到 a 的地址

	间接操作符：*
		*pa
		
（5）空指针 & 野指针
	 a. 空指针
		int *pa = NULL; 	//地址为 0x00000000
		
		//打印 pa 的值时，显示如下：
		pa  = (nil)
		空指针不能访问其值，没有实际意义：
		printf("*pa = %d\n", *pa); 	//Error	

	 b. 野指针
	 	未经初始化的指针（没有明确的指向）
	 	指针最初有明确指向，但在使用过程中
	 	地址丢失（free()）;
       	int *pc;

（6）关于指针的两个问题
	 类型说明符 *指针变量名称;
	 类型说明符* 指针变量名称;
	 类型说明符 * 指针变量名称;
	 
		int a;
		int *pa;

	 指针的类型：
	 	去掉指针变量名称后，剩余的部分即为指针的类型
		
		char *pch;		//char *
		int **pA;		//int **
	 	
	 指针所指向的类型：
		去掉指针变量名及其前面的一个 *;剩余的部分
		为指针所指向的类型 

		char *pch;		//char
		int **pA;		//int *

（7）指针的运算
	 a. 减法运算
	 	int a = 12;
	 	int b = 24;
	 	int *pa = &a;
	 	int *pb = &b;
	 	
	 	pa - pb;
	 	pb - pa;
	 	
	 	得出两个指针之间的距离是多少
	 	可以得出指针高低地址问题
	 	
	 b. 加法运算
	 	两个指针不能做加法运算，没有实际意义
	 
	 c. 加/减一个整型常量
	 一：
	 	int a = 9;
	 	int *pa = &a;
	 
	 	pa + 1:
	 	pa + 2:
	 二：
	 	char ch = '9';
	 	char *pc = &ch;
	 	
	 	pc + 1:
	 	pc + 2:

	  指针加减一个整型常量(N)，相当于向高地址
	  或低地址放向移动：
	  		N * sizeof(指针所指向的类型)
	  个字节。

	 d. 自增 & 自减		
	 	int arr[5] = {1,2,3,4,5};
		int *pa = arr;
		
		pa++:
			pa = pa+1;
			pa 指向 &arr[1]
		pa+1:
			pa 仍然指向 &arr[0]
		pa--:
	
		练习：
			使用指针倒置一个数组：
				不允许使用除以2的形式以及移位操作
		
	e. 关系运算
		>
		<
		>=
		<=
		pa == NULL;
		pa != NULL;		

（8）指针与数组
	 a. 再看数组的地址问题
		int arr[3] = {3,6,9};
		int *pa = arr;	//arr & &arr[0]

		arr   = 0x17f0
		pa    = 0x17f0
		
		arr+1 = 0x17f4
		pa+1  = 0x17f4
		
		arr+2 = 0x17f8
		pa+2  = 0x17f8

	 b. 数组元素的访问
	 	
	 	arr[0]	*(arr+0)  pa[0]  *(pa+0)
	 	arr[1]	*(arr+1)  pa[1]	 *(pa+1)
	 	arr[3]  *(arr+2)  pa[2]	 *(pa+2)

	 c. 地址类型转化
	 	double d = 9;
	 	
	 	int *pa;
	 	//将 &d 临时转换成 int * 型
	 	//并没有改变 &d 的类型
	 	pa = (int *)&d;

		int arr[5] = {1,2,3,4,5};
		int *pa = (int *)(&arr+1);
		//2,5
		printf("%d--%d\n", *(arr+1), *(pa-1));


（9）指针的所占内存大小：
	 int a;
	 char ch;

	 char *pc;     
	 short *ps;
	 int *pi;
	 long *pl;
	 float *pf;
	 double *pd;
	 
	 64 Bit OS:
		sizeof(char*)   = 8
		sizeof(short*)  = 8
		sizeof(int*)    = 8
		sizeof(long*)   = 8
		sizeof(float*)  = 8
		sizeof(double*) = 8

	 32 Bit OS:
		sizeof(char*)   = 4
		sizeof(short*)  = 4
		sizeof(int*)    = 4
		sizeof(long*)   = 4
		sizeof(float*)  = 4
		sizeof(double*) = 4

（10）同类型指针之间可以相互赋值
	  int a = 10;
	  int *pa;
	  
	  pa = &a;
	  *pa = *(&a) = a;
	  
	  int *pb;
	  pb = pa;

（11）指针数组 & 数组指针
	  
	  //指针数组
	  int *arr[4];
	  
	  //数组指针
	  int (*Arr)[4];

3. 二级指针
	地址的地址
	
	一般定义形式
		类型说明符 **指针变量名;

		int **pa;
		
		int a = 4;
		int *pb = &a;
		
		*pa = pb; 	//*pa = &a;

		**pa = *pb; //*pb = a;
		**pa = *(&a) = a;

		int **pa = &pb;
		/*
			int **pa;
			pa = &pb;
		*/
		
		/*
			pa = &pb;
			*pa = *(&pb) = pb;
			**pa = *pb = a;
		*/
		
		 &a = 0x7fffa6599ee4
		 pb = 0x7fffa6599ee4
		*pa = 0x7fffa6599ee4


思考：
	求二维数组边缘数据的总和
	1,2,3,4,5
	4,5,6,7,8
	7,8,9,8,7
	9,8,7,6,5

即求以下数据的和：
	1,2,3,4,5
	4       8
	7       7
	9,8,7,6,5













